// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package handlers

import (
	"context"
	"github.com/ONSdigital/dp-api-clients-go/v2/areas"
	health "github.com/ONSdigital/dp-healthcheck/healthcheck"
	"sync"
)

// Ensure, that AreaApiClientMock does implement AreaApiClient.
// If this is not the case, regenerate this file with moq.
var _ AreaApiClient = &AreaApiClientMock{}

// AreaApiClientMock is a mock implementation of AreaApiClient.
//
// 	func TestSomethingThatUsesAreaApiClient(t *testing.T) {
//
// 		// make and configure a mocked AreaApiClient
// 		mockedAreaApiClient := &AreaApiClientMock{
// 			CheckerFunc: func(ctx context.Context, check *health.CheckState) error {
// 				panic("mock out the Checker method")
// 			},
// 			GetAreaFunc: func(ctx context.Context, userAuthToken string, serviceAuthToken string, collectionID string, areaID string) (areas.AreaDetails, error) {
// 				panic("mock out the GetArea method")
// 			},
// 		}
//
// 		// use mockedAreaApiClient in code that requires AreaApiClient
// 		// and then make assertions.
//
// 	}
type AreaApiClientMock struct {
	// CheckerFunc mocks the Checker method.
	CheckerFunc func(ctx context.Context, check *health.CheckState) error

	// GetAreaFunc mocks the GetArea method.
	GetAreaFunc func(ctx context.Context, userAuthToken string, serviceAuthToken string, collectionID string, areaID string) (areas.AreaDetails, error)

	// calls tracks calls to the methods.
	calls struct {
		// Checker holds details about calls to the Checker method.
		Checker []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Check is the check argument value.
			Check *health.CheckState
		}
		// GetArea holds details about calls to the GetArea method.
		GetArea []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserAuthToken is the userAuthToken argument value.
			UserAuthToken string
			// ServiceAuthToken is the serviceAuthToken argument value.
			ServiceAuthToken string
			// CollectionID is the collectionID argument value.
			CollectionID string
			// AreaID is the areaID argument value.
			AreaID string
		}
	}
	lockChecker sync.RWMutex
	lockGetArea sync.RWMutex
}

// Checker calls CheckerFunc.
func (mock *AreaApiClientMock) Checker(ctx context.Context, check *health.CheckState) error {
	if mock.CheckerFunc == nil {
		panic("AreaApiClientMock.CheckerFunc: method is nil but AreaApiClient.Checker was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Check *health.CheckState
	}{
		Ctx:   ctx,
		Check: check,
	}
	mock.lockChecker.Lock()
	mock.calls.Checker = append(mock.calls.Checker, callInfo)
	mock.lockChecker.Unlock()
	return mock.CheckerFunc(ctx, check)
}

// CheckerCalls gets all the calls that were made to Checker.
// Check the length with:
//     len(mockedAreaApiClient.CheckerCalls())
func (mock *AreaApiClientMock) CheckerCalls() []struct {
	Ctx   context.Context
	Check *health.CheckState
} {
	var calls []struct {
		Ctx   context.Context
		Check *health.CheckState
	}
	mock.lockChecker.RLock()
	calls = mock.calls.Checker
	mock.lockChecker.RUnlock()
	return calls
}

// GetArea calls GetAreaFunc.
func (mock *AreaApiClientMock) GetArea(ctx context.Context, userAuthToken string, serviceAuthToken string, collectionID string, areaID string) (areas.AreaDetails, error) {
	if mock.GetAreaFunc == nil {
		panic("AreaApiClientMock.GetAreaFunc: method is nil but AreaApiClient.GetArea was just called")
	}
	callInfo := struct {
		Ctx              context.Context
		UserAuthToken    string
		ServiceAuthToken string
		CollectionID     string
		AreaID           string
	}{
		Ctx:              ctx,
		UserAuthToken:    userAuthToken,
		ServiceAuthToken: serviceAuthToken,
		CollectionID:     collectionID,
		AreaID:           areaID,
	}
	mock.lockGetArea.Lock()
	mock.calls.GetArea = append(mock.calls.GetArea, callInfo)
	mock.lockGetArea.Unlock()
	return mock.GetAreaFunc(ctx, userAuthToken, serviceAuthToken, collectionID, areaID)
}

// GetAreaCalls gets all the calls that were made to GetArea.
// Check the length with:
//     len(mockedAreaApiClient.GetAreaCalls())
func (mock *AreaApiClientMock) GetAreaCalls() []struct {
	Ctx              context.Context
	UserAuthToken    string
	ServiceAuthToken string
	CollectionID     string
	AreaID           string
} {
	var calls []struct {
		Ctx              context.Context
		UserAuthToken    string
		ServiceAuthToken string
		CollectionID     string
		AreaID           string
	}
	mock.lockGetArea.RLock()
	calls = mock.calls.GetArea
	mock.lockGetArea.RUnlock()
	return calls
}
