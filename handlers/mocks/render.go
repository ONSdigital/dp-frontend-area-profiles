// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package handlers

import (
	coreModel "github.com/ONSdigital/dp-renderer/model"
	"io"
	"sync"
)

// Ensure, that RenderClientMock does implement RenderClient.
// If this is not the case, regenerate this file with moq.
var _ RenderClient = &RenderClientMock{}

// RenderClientMock is a mock implementation of RenderClient.
//
// 	func TestSomethingThatUsesRenderClient(t *testing.T) {
//
// 		// make and configure a mocked RenderClient
// 		mockedRenderClient := &RenderClientMock{
// 			BuildPageFunc: func(w io.Writer, pageModel interface{}, templateName string)  {
// 				panic("mock out the BuildPage method")
// 			},
// 			NewBasePageModelFunc: func() coreModel.Page {
// 				panic("mock out the NewBasePageModel method")
// 			},
// 		}
//
// 		// use mockedRenderClient in code that requires RenderClient
// 		// and then make assertions.
//
// 	}
type RenderClientMock struct {
	// BuildPageFunc mocks the BuildPage method.
	BuildPageFunc func(w io.Writer, pageModel interface{}, templateName string)

	// NewBasePageModelFunc mocks the NewBasePageModel method.
	NewBasePageModelFunc func() coreModel.Page

	// calls tracks calls to the methods.
	calls struct {
		// BuildPage holds details about calls to the BuildPage method.
		BuildPage []struct {
			// W is the w argument value.
			W io.Writer
			// PageModel is the pageModel argument value.
			PageModel interface{}
			// TemplateName is the templateName argument value.
			TemplateName string
		}
		// NewBasePageModel holds details about calls to the NewBasePageModel method.
		NewBasePageModel []struct {
		}
	}
	lockBuildPage        sync.RWMutex
	lockNewBasePageModel sync.RWMutex
}

// BuildPage calls BuildPageFunc.
func (mock *RenderClientMock) BuildPage(w io.Writer, pageModel interface{}, templateName string) {
	if mock.BuildPageFunc == nil {
		panic("RenderClientMock.BuildPageFunc: method is nil but RenderClient.BuildPage was just called")
	}
	callInfo := struct {
		W            io.Writer
		PageModel    interface{}
		TemplateName string
	}{
		W:            w,
		PageModel:    pageModel,
		TemplateName: templateName,
	}
	mock.lockBuildPage.Lock()
	mock.calls.BuildPage = append(mock.calls.BuildPage, callInfo)
	mock.lockBuildPage.Unlock()
	mock.BuildPageFunc(w, pageModel, templateName)
}

// BuildPageCalls gets all the calls that were made to BuildPage.
// Check the length with:
//     len(mockedRenderClient.BuildPageCalls())
func (mock *RenderClientMock) BuildPageCalls() []struct {
	W            io.Writer
	PageModel    interface{}
	TemplateName string
} {
	var calls []struct {
		W            io.Writer
		PageModel    interface{}
		TemplateName string
	}
	mock.lockBuildPage.RLock()
	calls = mock.calls.BuildPage
	mock.lockBuildPage.RUnlock()
	return calls
}

// NewBasePageModel calls NewBasePageModelFunc.
func (mock *RenderClientMock) NewBasePageModel() coreModel.Page {
	if mock.NewBasePageModelFunc == nil {
		panic("RenderClientMock.NewBasePageModelFunc: method is nil but RenderClient.NewBasePageModel was just called")
	}
	callInfo := struct {
	}{}
	mock.lockNewBasePageModel.Lock()
	mock.calls.NewBasePageModel = append(mock.calls.NewBasePageModel, callInfo)
	mock.lockNewBasePageModel.Unlock()
	return mock.NewBasePageModelFunc()
}

// NewBasePageModelCalls gets all the calls that were made to NewBasePageModel.
// Check the length with:
//     len(mockedRenderClient.NewBasePageModelCalls())
func (mock *RenderClientMock) NewBasePageModelCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockNewBasePageModel.RLock()
	calls = mock.calls.NewBasePageModel
	mock.lockNewBasePageModel.RUnlock()
	return calls
}
